use proc_macro2::TokenStream;
use quote::quote;

use super::GenV1;
use crate::ast::{Aping, Comment};

impl GenV1 {
    pub(crate) fn generate_top_level_docs(&self, aping: &Aping) -> TokenStream {
        let description = aping.top_level_docs().module_comment();
        let namespace = aping.namespace().module_comment();
        let owner = aping.owner().module_comment();
        let date = aping.date().module_comment();
        let version = aping.version().module_comment();

        quote! {
            #[doc = "This document was generated by BetfairTypeGen GenV1"]
            #[doc = "# Description"]
            #description
            #[doc = "# Version"]
            #version
            #[doc = "# Date"]
            #date
            #[doc = "# Owner"]
            #owner
            #[doc = "# Namespace"]
            #namespace
        }
    }
}

pub(crate) trait CommentParse {
    fn module_comment(&self) -> TokenStream;
    fn object_comment(&self) -> TokenStream;
}

impl CommentParse for &[Comment] {
    fn module_comment(&self) -> TokenStream {
        self.iter().map(|x| x.module_comment()).fold(quote! {}, |acc, i| {
            quote! {
                #acc
                #i
            }
        })
    }

    fn object_comment(&self) -> TokenStream {
        self.iter().map(|x| x.object_comment()).fold(quote! {}, |acc, i| {
            quote! {
                #acc
                #i
            }
        })
    }
}

#[cfg(test)]
mod test {

    use super::super::test::GEN_V1;
    use super::*;
    use crate::ast::{Comment, Name};

    #[rstest::rstest]
    fn module_docs() {
        let aping = Aping::builder()
            .top_level_docs(vec![
                Comment { item: "my custom text".to_string() },
                Comment { item: "my custom text x2".to_string() },
            ])
            .version(Name("1.0.0".to_string()))
            .date(Name("2020-01-01".to_string()))
            .name(Name("MyName".to_string()))
            .owner(Name("MyOwner".to_string()))
            .namespace(Name("MyNamespace".to_string()))
            .build();

        // Action
        let generated_code = GEN_V1.generate_top_level_docs(&aping);

        // Assert
        let expected = quote! {
            #[doc = "This document was generated by BetfairTypeGen GenV1"]
            #[doc = "# Description"]
            #[doc = "my custom text"]
            #[doc = "my custom text x2"]
            #[doc = "# Version"]
            #[doc = "1.0.0"]
            #[doc = "# Date"]
            #[doc = "2020-01-01"]
            #[doc = "# Owner"]
            #[doc = "MyOwner"]
            #[doc = "# Namespace"]
            #[doc = "MyNamespace"]
        };
        assert_eq!(generated_code.to_string(), expected.to_string());
    }
}
